pragma solidity ^0.6.0;

contract Marks
{
   struct Student
   {
      int ID;
      string fname;
      string lname;
      int marks;

   }

    address owner;
    int public stdCount =0;
    mapping(int =>Student) public stdRecords;

    modifier onlyOwner
    {

        require(owner == msg.sender);
        _;
    }

    constructor () public
    {
        owner=msg.sender;

    }
    
    function addNeRecords(int _ID,string memory _fName , 
                                 string memory _lName ,
                                 int _marks) public onlyOwner
       
    {
       stdCount=stdCount + 1;
       stdRecords[stdCount]=Student(_ID , _fName , _lName , _marks);

    }

    function bonusMarks(int _bonus) public onlyOwner
    {
        stdRecords[stdCount].marks=stdRecords[stdCount].marks +_bonus;

    }
}


*********************************************************************************


pragma solidity ^0.6.12;

contract DynamicArray
{
   string[] private arr;

   function addData(string memory name) public
   {
    arr.push(name);

   }

   function getData() public view returns(string[] memory)
   {
       return arr;
   }

   function getLength() public view returns(uint)
   {
       return arr.length;
   }
}