pragma solidity ^0.6.0;

contract MyBank
{
    mapping(address => uint)private _balances;
    //this address has this balance
    address public owner;

    constructor () public
    {
        owner=msg.sender;

    }

       function deposite() public payable returns(uint)
       {
           require((_balances[msg.sender]+msg.value)> _balances[msg.sender]&&msg.sender!=address(0));
           _balances[msg.sender]+=msg.value;
           return _balances[msg.sender];
       }

       function withdraw(uint withdrawAmount) public returns(uint)
       {
           require(_balances[msg.sender]>=withdrawAmount);
           require(msg.sender!=address(0));
           require(_balances[msg.sender]>0);
           _balances[msg.sender]-=withdrawAmount;
           msg.sender.transfer(withdrawAmount);
           return _balances[msg.sender];
           
       }
       function viewBalance() public view returns(uint)
       {
           return _balances[msg.sender];
       }



}